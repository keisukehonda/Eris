package jp.ne.internavi.sync.hcp.dist
package thrift.conversions

import com.twitter.util.Time
import com.twitter.conversions.time._
import jp.ne.internavi.sync.hcp.dist

object BoolColumn {
  class RichBoolColumn(bool_column: dist.BoolColumn){
  	def toThrift = new thrift.column_bool(  	
  		bool_column.value  		
  	)  	
  }
  implicit def shardingBoolColumn(bool_column: dist.BoolColumn) = new RichBoolColumn(bool_column)
  
  class RichThriftBoolColumn(bool_column: thrift.column_bool){
  	def fromThrift(colname: String, query: String) = new dist.BoolColumn(
  		colname,
  		bool_column.value,
  		query
  	) 
  }
  implicit def thriftBoolColumn(bool_column: thrift.column_bool) = new RichThriftBoolColumn(bool_column)
}

object LongColumn {
  class RichLongColumn(longcolumn: dist.LongColumn){
  	def toThrift = new thrift.column_long(  		
  		longcolumn.value
  	)  		  	
  }
  implicit def shardingLongColumn(longcolumn: dist.LongColumn) = new RichLongColumn(longcolumn)
}

object Route {
  class RichShardingRoute(route: dist.Route) {
    def toThrift = new thrift.Route(
    	route.nodetype,
    	route.id,
    	route.hostname,
    	route.order
    )
  }
  implicit def shardingRouteToRichShardingRoute(route: dist.Route) = new RichShardingRoute(route)
  
  class RichThriftRoute(route: thrift.Route) {
    def fromThrift = new dist.Route(
      route.nodetype,
      route.id,      
      route.hostname,
      route.order,      
      0     
    )
  }
  implicit def thriftRouteToRichThriftRoute(route: thrift.Route) = new RichThriftRoute(route)  	                                                                   
}

object Cal {
  class RichShardingCal(cal: dist.Cal) {
    def toThrift = new thrift.delivery_cal_messages(
    	cal.id,
    	cal.from_date,
    	cal.to_date,
    	cal.recid,
    	cal.category_id,
    	cal.service_id,
    	cal.provider_id,
    	cal.seen,
    	cal.validity,
    	cal.delivery_start,
    	cal.table_name,
    	cal.id1,
    	cal.id2,
    	cal.id3,
    	cal.content_tokyo,
    	cal.content_itrf
    )
  }
  implicit def shardingCalToRichShardingCal(cal: dist.Cal) = new RichShardingCal(cal)
  
  class RichThriftCal(cal: thrift.delivery_cal_messages) {
    def fromThrift = new dist.Cal(    	
    	cal.id,
    	cal.from_date,
    	cal.to_date,
    	cal.recid,
    	cal.category_id,
    	cal.service_id,
    	cal.provider_id,
    	cal.seen,
    	cal.validity,
    	cal.delivery_start,
    	cal.table_name,
    	cal.id1,
    	cal.id2,
    	cal.id3,
    	cal.content_tokyo,
    	cal.content_itrf    	
    )
  }
  implicit def thriftCalToRichThriftCal(cal: thrift.delivery_cal_messages) = new RichThriftCal(cal)  	                                                                   
}

object Image {
  class RichShardingImage(image: dist.Image) {
    def toThrift = new thrift.delivery_images(
    	image.source_id,
    	image.recid,
    	image.recid_check_flg,
    	image.source_type,
    	image.source    	
    )
  }
  implicit def shardingImageToRichShardingRoute(image: dist.Image) = new RichShardingImage(image)
  
  class RichThriftImage(image: thrift.delivery_images) {
    def fromThrift = new dist.Image(
    	image.source_id,
    	image.recid,
    	image.recid_check_flg,
    	image.source_type,
    	image.source    	
    )
  }
  implicit def thriftImageToRichThriftImage(image: thrift.delivery_images) = new RichThriftImage(image)  	                                                                   
}

object Wall {
  class RichShardingWall(wall: dist.Wall) {
    def toThrift = new thrift.delivery_wall_messages(
    	wall.id,
    	wall.recid,
      	wall.category_id,
      	wall.service_id,
      	wall.view,      
      	wall.provider_id,     	
      	wall.seen,
      	wall.validity,
      	wall.delivery_start,
      	wall.table_name,
      	wall.id1,
      	wall.id2,
      	wall.id3,
      	wall.content_tokyo,
      	wall.content_itrf,
      	wall.ins)
  }
  implicit def shardingWallToRichShardingWall(wall: dist.Wall) = new RichShardingWall(wall)
  
  class RichThriftWall(wall: thrift.delivery_wall_messages) {
    def fromThrift = new dist.Wall(
    	wall.id,
      	wall.recid,
      	wall.category_id,
      	wall.service_id,
      	wall.view,      	
      	wall.provider_id,      	
      	wall.seen,
      	wall.validity,
      	wall.delivery_start,
      	wall.table_name,
      	wall.id1,
      	wall.id2,
      	wall.id3,
      	wall.content_tokyo,
      	wall.content_itrf,
      	wall.ins)       
  }
  implicit def thriftWallToRichThriftWall(wall: thrift.delivery_wall_messages) = new RichThriftWall(wall)
 }
